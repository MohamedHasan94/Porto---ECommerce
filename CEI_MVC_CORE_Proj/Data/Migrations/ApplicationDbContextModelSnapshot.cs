// <auto-generated />
using System;
using CEI_MVC_CORE_Proj.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CEI_MVC_CORE_Proj.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "1", ConcurrencyStamp = "e7ac0740-9d1c-4cc0-88db-77c13a0ec43b", Name = "Admin", NormalizedName = "ADMIN" },
                        new { Id = "2", ConcurrencyStamp = "c4666af6-6a3c-45d6-86ad-6e1c54554374", Name = "Vendor", NormalizedName = "VENDOR" }
                    );
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfilePictureLink")
                        .HasMaxLength(100);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "e19cf102-d4ce-401c-94a5-76a72318641e", AccessFailedCount = 0, ConcurrencyStamp = "79899a15-a562-43fc-9f03-0f49371d7a4e", Email = "admin@domain.com", EmailConfirmed = false, FirstName = "admin", LastName = "admin", LockoutEnabled = false, NormalizedUserName = "ADMIN", PasswordHash = "AQAAAAEAACcQAAAAEJUqvb1VVyeG+4hEdfgEpUxkczbB8BPziNQCQo6b/7OJ4paddrsFYGv5tomQvv0Gkg==", PhoneNumberConfirmed = false, ProfilePictureLink = "/images/UserImages/admin.jpg", SecurityStamp = "SecurityStamp", TwoFactorEnabled = false, UserName = "admin" },
                        new { Id = "0bcd78db-8663-46fd-874c-3b4fa91e63e8", AccessFailedCount = 0, ConcurrencyStamp = "01e6384d-5411-4489-a0fd-cb78faae47dd", Email = "vendor@domain.com", EmailConfirmed = false, FirstName = "vendor", LastName = "vendor", LockoutEnabled = false, NormalizedUserName = "VENDOR", PasswordHash = "AQAAAAEAACcQAAAAEKbnfiAqDVbt14hDRvW90iEH+EXjwoDSopqZouIoNTJsc7Q918y3TQR1MVhfL0CFiA==", PhoneNumberConfirmed = false, ProfilePictureLink = "/images/UserImages/vendor.jpg", SecurityStamp = "SecurityStamp", TwoFactorEnabled = false, UserName = "vendor" },
                        new { Id = "7fb8769f-1053-4153-b91f-7e1599a2f438", AccessFailedCount = 0, ConcurrencyStamp = "265f8a7a-4dda-4286-be60-19847172c55e", Email = "customer1@domain.com", EmailConfirmed = false, FirstName = "customer", LastName = "customer", LockoutEnabled = false, NormalizedUserName = "CUSTOMER1", PasswordHash = "AQAAAAEAACcQAAAAEMYYhGjlYQhtIWdyDtFgsuChldGEcLI23D9nFQeqsaxsp03RS5xDamQflyuPte+s8g==", PhoneNumberConfirmed = false, ProfilePictureLink = "/images/UserImages/customer1.jpg", SecurityStamp = "SecurityStamp", TwoFactorEnabled = false, UserName = "customer1" },
                        new { Id = "4e668f4c-31b6-487e-b343-83a7d3984cd5", AccessFailedCount = 0, ConcurrencyStamp = "43e4f8e9-cb08-4231-b591-63f768989814", Email = "customer2@domain.com", EmailConfirmed = false, FirstName = "customer", LastName = "customer", LockoutEnabled = false, NormalizedUserName = "CUSTOMER2", PasswordHash = "AQAAAAEAACcQAAAAENsKOmikf4wmpE0V0wagGCd8EqZmm1Z5OjE3dc6nGnqb/hhgAKYgVdOBY/r6fuXUFA==", PhoneNumberConfirmed = false, ProfilePictureLink = "/images/UserImages/customer2.jpg", SecurityStamp = "SecurityStamp", TwoFactorEnabled = false, UserName = "customer2" }
                    );
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new { Id = 1, Name = "Arts & Crafts" },
                        new { Id = 2, Name = "Automotive" },
                        new { Id = 3, Name = "Baby" },
                        new { Id = 4, Name = "Books" },
                        new { Id = 5, Name = "Eletronics" },
                        new { Id = 6, Name = "Women's Fashion" },
                        new { Id = 7, Name = "Men's Fashion" },
                        new { Id = 8, Name = "Health & Household" },
                        new { Id = 9, Name = "Home & Kitchen" },
                        new { Id = 10, Name = "Military Accessories" },
                        new { Id = 11, Name = "Movies & Television" },
                        new { Id = 12, Name = "Sports & Outdoors" },
                        new { Id = 13, Name = "Tools & Home Improvement" },
                        new { Id = 14, Name = "Toys & Games" },
                        new { Id = 15, Name = "Others" }
                    );
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.PaymentMethod", b =>
                {
                    b.Property<int>("FK_ProductId");

                    b.Property<int>("Method");

                    b.HasKey("FK_ProductId", "Method");

                    b.ToTable("Product_PaymentMethod");

                    b.HasData(
                        new { FK_ProductId = 1, Method = 0 },
                        new { FK_ProductId = 1, Method = 3 },
                        new { FK_ProductId = 2, Method = 1 },
                        new { FK_ProductId = 2, Method = 4 },
                        new { FK_ProductId = 3, Method = 0 },
                        new { FK_ProductId = 3, Method = 3 },
                        new { FK_ProductId = 4, Method = 1 },
                        new { FK_ProductId = 4, Method = 3 },
                        new { FK_ProductId = 5, Method = 0 },
                        new { FK_ProductId = 5, Method = 4 },
                        new { FK_ProductId = 6, Method = 0 },
                        new { FK_ProductId = 6, Method = 3 },
                        new { FK_ProductId = 7, Method = 1 },
                        new { FK_ProductId = 7, Method = 4 },
                        new { FK_ProductId = 8, Method = 0 },
                        new { FK_ProductId = 8, Method = 3 },
                        new { FK_ProductId = 9, Method = 0 },
                        new { FK_ProductId = 9, Method = 3 },
                        new { FK_ProductId = 10, Method = 1 },
                        new { FK_ProductId = 10, Method = 4 },
                        new { FK_ProductId = 11, Method = 0 },
                        new { FK_ProductId = 11, Method = 4 },
                        new { FK_ProductId = 12, Method = 0 },
                        new { FK_ProductId = 12, Method = 4 }
                    );
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("FK_CategoryId");

                    b.Property<string>("FK_VendorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double>("OfferPrice");

                    b.Property<double>("Price");

                    b.Property<long>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("FK_CategoryId");

                    b.HasIndex("FK_VendorId");

                    b.ToTable("Product");

                    b.HasData(
                        new { Id = 1, Description = "Placeholder Product for shwoing", FK_CategoryId = 1, FK_VendorId = "0bcd78db-8663-46fd-874c-3b4fa91e63e8", Name = "MaintainIT", OfferPrice = 100.0, Price = 300.0, Quantity = 71L },
                        new { Id = 2, Description = "Placeholder Product for shwoing", FK_CategoryId = 12, FK_VendorId = "0bcd78db-8663-46fd-874c-3b4fa91e63e8", Name = "KinderZoo", OfferPrice = 301.0, Price = 301.0, Quantity = 89L },
                        new { Id = 3, Description = "Placeholder Product for shwoing", FK_CategoryId = 4, FK_VendorId = "0bcd78db-8663-46fd-874c-3b4fa91e63e8", Name = "Mixed Feelings", OfferPrice = 302.0, Price = 302.0, Quantity = 16L },
                        new { Id = 4, Description = "Placeholder Product for shwoing", FK_CategoryId = 8, FK_VendorId = "0bcd78db-8663-46fd-874c-3b4fa91e63e8", Name = "Norse Nurse", OfferPrice = 303.0, Price = 303.0, Quantity = 91L },
                        new { Id = 5, Description = "Placeholder Product for shwoing", FK_CategoryId = 1, FK_VendorId = "0bcd78db-8663-46fd-874c-3b4fa91e63e8", Name = "Mineral Massage", OfferPrice = 100.0, Price = 304.0, Quantity = 15L },
                        new { Id = 6, Description = "Placeholder Product for shwoing", FK_CategoryId = 5, FK_VendorId = "0bcd78db-8663-46fd-874c-3b4fa91e63e8", Name = "Media Pet", OfferPrice = 100.0, Price = 305.0, Quantity = 43L },
                        new { Id = 7, Description = "Placeholder Product for shwoing", FK_CategoryId = 3, FK_VendorId = "0bcd78db-8663-46fd-874c-3b4fa91e63e8", Name = "EdWeb", OfferPrice = 100.0, Price = 306.0, Quantity = 18L },
                        new { Id = 8, Description = "Placeholder Product for shwoing", FK_CategoryId = 7, FK_VendorId = "0bcd78db-8663-46fd-874c-3b4fa91e63e8", Name = "Candy Floss", OfferPrice = 100.0, Price = 307.0, Quantity = 59L },
                        new { Id = 9, Description = "Placeholder Product for shwoing", FK_CategoryId = 4, FK_VendorId = "0bcd78db-8663-46fd-874c-3b4fa91e63e8", Name = "Transcoder", OfferPrice = 100.0, Price = 308.0, Quantity = 97L },
                        new { Id = 10, Description = "Placeholder Product for shwoing", FK_CategoryId = 9, FK_VendorId = "0bcd78db-8663-46fd-874c-3b4fa91e63e8", Name = "Pubisphere", OfferPrice = 100.0, Price = 309.0, Quantity = 77L },
                        new { Id = 11, Description = "Placeholder Product for shwoing", FK_CategoryId = 8, FK_VendorId = "0bcd78db-8663-46fd-874c-3b4fa91e63e8", Name = "BrainWire", OfferPrice = 100.0, Price = 310.0, Quantity = 95L },
                        new { Id = 12, Description = "Placeholder Product for shwoing", FK_CategoryId = 8, FK_VendorId = "0bcd78db-8663-46fd-874c-3b4fa91e63e8", Name = "Package Fax", OfferPrice = 311.0, Price = 311.0, Quantity = 45L }
                    );
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.ProductImage", b =>
                {
                    b.Property<int>("FK_ProductId");

                    b.Property<string>("Path")
                        .HasMaxLength(100);

                    b.HasKey("FK_ProductId", "Path");

                    b.ToTable("ProductImage");

                    b.HasData(
                        new { FK_ProductId = 1, Path = "/images/ProductImages/0_0.jpg" },
                        new { FK_ProductId = 1, Path = "/images/ProductImages/0_1.jpg" },
                        new { FK_ProductId = 2, Path = "/images/ProductImages/1_0.jpg" },
                        new { FK_ProductId = 2, Path = "/images/ProductImages/1_1.jpg" },
                        new { FK_ProductId = 3, Path = "/images/ProductImages/2_0.jpg" },
                        new { FK_ProductId = 3, Path = "/images/ProductImages/2_1.jpg" },
                        new { FK_ProductId = 4, Path = "/images/ProductImages/3_0.jpg" },
                        new { FK_ProductId = 4, Path = "/images/ProductImages/3_1.jpg" },
                        new { FK_ProductId = 5, Path = "/images/ProductImages/4_0.jpg" },
                        new { FK_ProductId = 5, Path = "/images/ProductImages/4_1.jpg" },
                        new { FK_ProductId = 6, Path = "/images/ProductImages/5_0.jpg" },
                        new { FK_ProductId = 6, Path = "/images/ProductImages/5_1.jpg" },
                        new { FK_ProductId = 7, Path = "/images/ProductImages/6_0.jpg" },
                        new { FK_ProductId = 7, Path = "/images/ProductImages/6_1.jpg" },
                        new { FK_ProductId = 8, Path = "/images/ProductImages/7_0.jpg" },
                        new { FK_ProductId = 8, Path = "/images/ProductImages/7_1.jpg" },
                        new { FK_ProductId = 9, Path = "/images/ProductImages/8_0.jpg" },
                        new { FK_ProductId = 9, Path = "/images/ProductImages/8_1.jpg" },
                        new { FK_ProductId = 10, Path = "/images/ProductImages/9_0.jpg" },
                        new { FK_ProductId = 10, Path = "/images/ProductImages/9_1.jpg" },
                        new { FK_ProductId = 11, Path = "/images/ProductImages/10_0.jpg" },
                        new { FK_ProductId = 11, Path = "/images/ProductImages/10_1.jpg" },
                        new { FK_ProductId = 12, Path = "/images/ProductImages/11_0.jpg" },
                        new { FK_ProductId = 12, Path = "/images/ProductImages/11_1.jpg" }
                    );
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.ProductTagRel", b =>
                {
                    b.Property<int>("FK_ProductId");

                    b.Property<int>("FK_TagId");

                    b.HasKey("FK_ProductId", "FK_TagId");

                    b.HasIndex("FK_TagId");

                    b.ToTable("Product_Tag");

                    b.HasData(
                        new { FK_ProductId = 1, FK_TagId = 1 },
                        new { FK_ProductId = 2, FK_TagId = 1 },
                        new { FK_ProductId = 3, FK_TagId = 1 },
                        new { FK_ProductId = 4, FK_TagId = 1 },
                        new { FK_ProductId = 5, FK_TagId = 1 },
                        new { FK_ProductId = 6, FK_TagId = 1 },
                        new { FK_ProductId = 7, FK_TagId = 1 },
                        new { FK_ProductId = 8, FK_TagId = 1 },
                        new { FK_ProductId = 9, FK_TagId = 1 },
                        new { FK_ProductId = 10, FK_TagId = 1 },
                        new { FK_ProductId = 11, FK_TagId = 1 },
                        new { FK_ProductId = 12, FK_TagId = 1 }
                    );
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.RequestToAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FK_UserId");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FK_UserId");

                    b.ToTable("RequestToAdmin");

                    b.HasData(
                        new { Id = 1, Data = "Summer Sports Wear", FK_UserId = "0bcd78db-8663-46fd-874c-3b4fa91e63e8", Status = 0, Type = 0 },
                        new { Id = 2, Data = "This user is requesting vendor role", FK_UserId = "7fb8769f-1053-4153-b91f-7e1599a2f438", Status = 0, Type = 1 },
                        new { Id = 3, Data = "This user is requesting vendor role", FK_UserId = "4e668f4c-31b6-487e-b343-83a7d3984cd5", Status = 0, Type = 1 }
                    );
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tag");

                    b.HasData(
                        new { Id = 1, Name = "AllPurpose" },
                        new { Id = 2, Name = "TagExample" }
                    );
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckOutId");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("FK_CustomerId");

                    b.Property<int>("FK_ProductId");

                    b.Property<int>("PaymentMethod");

                    b.Property<int>("Quantity");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("FK_CustomerId");

                    b.HasIndex("FK_ProductId");

                    b.ToTable("Transaction");

                    b.HasData(
                        new { Id = 1, CheckOutId = "1587811615922_7fb8769f", DateTime = new DateTime(2020, 4, 25, 12, 46, 55, 886, DateTimeKind.Local), FK_CustomerId = "7fb8769f-1053-4153-b91f-7e1599a2f438", FK_ProductId = 1, PaymentMethod = 4, Quantity = 3, Status = 0 },
                        new { Id = 2, CheckOutId = "1587811615922_7fb8769f", DateTime = new DateTime(2020, 4, 25, 12, 46, 55, 886, DateTimeKind.Local), FK_CustomerId = "7fb8769f-1053-4153-b91f-7e1599a2f438", FK_ProductId = 2, PaymentMethod = 3, Quantity = 1, Status = 0 },
                        new { Id = 3, CheckOutId = "1587811615922_4e668f4c", DateTime = new DateTime(2020, 4, 25, 12, 46, 55, 886, DateTimeKind.Local), FK_CustomerId = "4e668f4c-31b6-487e-b343-83a7d3984cd5", FK_ProductId = 5, PaymentMethod = 2, Quantity = 3, Status = 0 },
                        new { Id = 4, CheckOutId = "1587811615922_4e668f4c", DateTime = new DateTime(2020, 4, 25, 12, 46, 55, 886, DateTimeKind.Local), FK_CustomerId = "4e668f4c-31b6-487e-b343-83a7d3984cd5", FK_ProductId = 2, PaymentMethod = 5, Quantity = 4, Status = 0 }
                    );
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.UserRoleRel", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "e19cf102-d4ce-401c-94a5-76a72318641e", RoleId = "1" },
                        new { UserId = "e19cf102-d4ce-401c-94a5-76a72318641e", RoleId = "2" },
                        new { UserId = "0bcd78db-8663-46fd-874c-3b4fa91e63e8", RoleId = "2" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.PaymentMethod", b =>
                {
                    b.HasOne("CEI_MVC_CORE_Proj.Models.Product", "Product")
                        .WithMany("PaymentMethod")
                        .HasForeignKey("FK_ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.Product", b =>
                {
                    b.HasOne("CEI_MVC_CORE_Proj.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("FK_CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CEI_MVC_CORE_Proj.Models.AppUser", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("FK_VendorId");
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.ProductImage", b =>
                {
                    b.HasOne("CEI_MVC_CORE_Proj.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("FK_ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.ProductTagRel", b =>
                {
                    b.HasOne("CEI_MVC_CORE_Proj.Models.Product", "Product")
                        .WithMany("ProductTagRels")
                        .HasForeignKey("FK_ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CEI_MVC_CORE_Proj.Models.Tag", "Tag")
                        .WithMany("ProductTagRels")
                        .HasForeignKey("FK_TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.RequestToAdmin", b =>
                {
                    b.HasOne("CEI_MVC_CORE_Proj.Models.AppUser", "User")
                        .WithMany("Requests")
                        .HasForeignKey("FK_UserId");
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.Transaction", b =>
                {
                    b.HasOne("CEI_MVC_CORE_Proj.Models.AppUser", "Customer")
                        .WithMany("Transactions")
                        .HasForeignKey("FK_CustomerId");

                    b.HasOne("CEI_MVC_CORE_Proj.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("FK_ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CEI_MVC_CORE_Proj.Models.UserRoleRel", b =>
                {
                    b.HasOne("CEI_MVC_CORE_Proj.Models.AppRole", "Role")
                        .WithMany("UserRoleRel")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CEI_MVC_CORE_Proj.Models.AppUser", "User")
                        .WithMany("UserRoleRel")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CEI_MVC_CORE_Proj.Models.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CEI_MVC_CORE_Proj.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CEI_MVC_CORE_Proj.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CEI_MVC_CORE_Proj.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
